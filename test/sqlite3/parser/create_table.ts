import { SourceLocation, Token, TokenType, Keyword } from "../../../src/lexer"
import { Node } from "../../../src/parser"

export const actual = `
CREATE TABLE test (
    text TEXT PRIMARY KEY,
    age INT
)
`.trim()
export const expected = new Node("root")
  .append(new Node("create table statement")
    .append(new Token(Keyword.CREATE, "CREATE", { keyword: Keyword.CREATE, location: new SourceLocation(0, 1, 0)}))
    .append(new Token(Keyword.TABLE, "TABLE", { keyword: Keyword.TABLE, preskips: [new Token(TokenType.WhiteSpace, " ", { location: new SourceLocation(6, 1, 6)})], location: new SourceLocation(7, 1, 7)}))
    .append(new Node("object name", "test")
      .append(new Token(TokenType.Identifier, "test", { keyword: Keyword.TEST, preskips: [new Token(TokenType.WhiteSpace, " ", { location: new SourceLocation(12, 1, 12)})], location: new SourceLocation(13, 1, 13)}))
    )
    .append(new Token(TokenType.LeftParen, "(", { preskips: [new Token(TokenType.WhiteSpace, " ", { location: new SourceLocation(17, 1, 17)})], location: new SourceLocation(18, 1, 18)}))
    .append(new Node("table column")
      .append(new Node("column name", "text")
        .append(new Token(TokenType.Identifier, "text", { keyword: Keyword.TEXT, preskips: [new Token(TokenType.LineBreak, "\n", { location: new SourceLocation(19, 1, 19)}), new Token(TokenType.WhiteSpace, "    ", { location: new SourceLocation(20, 2, 1)})], location: new SourceLocation(24, 2, 5)}))
      )
      .append(new Node("column type")
        .append(new Node("type name", "TEXT")
          .append(new Token(TokenType.Identifier, "TEXT", { keyword: Keyword.TEXT, preskips: [new Token(TokenType.WhiteSpace, " ", { location: new SourceLocation(28, 2, 9)})], location: new SourceLocation(29, 2, 10)}))
        )
      )
      .append(new Node("column constraint")
        .append(new Node("primary key constraint")
          .append(new Token(Keyword.PRIMARY, "PRIMARY", { keyword: Keyword.PRIMARY, preskips: [new Token(TokenType.WhiteSpace, " ", { location: new SourceLocation(33, 2, 14)})], location: new SourceLocation(34, 2, 15)}))
          .append(new Token(TokenType.Identifier, "KEY", { keyword: Keyword.KEY, preskips: [new Token(TokenType.WhiteSpace, " ", { location: new SourceLocation(41, 2, 22)})], location: new SourceLocation(42, 2, 23)}))
        )
      )
    )
    .append(new Token(TokenType.Comma, ",", { location: new SourceLocation(45, 2, 26)}))
    .append(new Node("table column")
      .append(new Node("column name", "age")
        .append(new Token(TokenType.Identifier, "age", { keyword: Keyword.AGE, preskips: [new Token(TokenType.LineBreak, "\n", { location: new SourceLocation(46, 2, 27)}), new Token(TokenType.WhiteSpace, "    ", { location: new SourceLocation(47, 3, 1)})], location: new SourceLocation(51, 3, 5)}))
      )
      .append(new Node("column type")
        .append(new Node("type name", "INT")
          .append(new Token(TokenType.Identifier, "INT", { keyword: Keyword.INT, preskips: [new Token(TokenType.WhiteSpace, " ", { location: new SourceLocation(54, 3, 8)})], postskips: [new Token(TokenType.LineBreak, "\n", { location: new SourceLocation(58, 3, 12)})], location: new SourceLocation(55, 3, 9)}))
        )
      )
    )
    .append(new Token(TokenType.RightParen, ")", { location: new SourceLocation(59, 4, 1)}))
    .append(new Token(TokenType.Eof, "", { eos: true, location: new SourceLocation(60, 4, 2)}))
  )