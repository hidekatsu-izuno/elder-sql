import { SourceLocation, Token, TokenType, Keyword } from "../../../src/lexer"
import { Node } from "../../../src/parser"

export const actual = `
SELECT 1+2-3, -1*2/3 c1, +1-2*3 AS c2
`.trim()
export const expected = new Node("root")
  .add(new Node("select statement")
    .add(new Node("select clause")
      .add(new Token(Keyword.SELECT, "SELECT", { keyword: Keyword.SELECT, location: new SourceLocation(0, 1, 0) }))
      .add(new Node("select columns")
        .add(new Node("select column")
          .add(new Node("expression")
            .add(new Token(TokenType.Number, "1", { preskips: [new Token(TokenType.WhiteSpace, " ", { location: new SourceLocation(6, 1, 6) })], location: new SourceLocation(7, 1, 7) }))
            .add(new Token(TokenType.Operator, "+", { location: new SourceLocation(8, 1, 8) }))
            .add(new Token(TokenType.Number, "2", { location: new SourceLocation(9, 1, 9) }))
            .add(new Token(TokenType.Operator, "-", { location: new SourceLocation(10, 1, 10) }))
            .add(new Token(TokenType.Number, "3", { location: new SourceLocation(11, 1, 11) }))
          )
        )
        .add(new Token(TokenType.Comma, ",", { postskips: [new Token(TokenType.WhiteSpace, " ", { location: new SourceLocation(13, 1, 13) })], location: new SourceLocation(12, 1, 12) }))
        .add(new Node("select column")
          .add(new Node("expression")
            .add(new Token(TokenType.Operator, "-", { location: new SourceLocation(14, 1, 14) }))
            .add(new Token(TokenType.Number, "1", { location: new SourceLocation(15, 1, 15) }))
            .add(new Token(TokenType.Operator, "*", { location: new SourceLocation(16, 1, 16) }))
            .add(new Token(TokenType.Number, "2", { location: new SourceLocation(17, 1, 17) }))
            .add(new Token(TokenType.Operator, "/", { location: new SourceLocation(18, 1, 18) }))
            .add(new Token(TokenType.Number, "3", { location: new SourceLocation(19, 1, 19) }))
          )
        )
        .add(new Token(TokenType.Comma, ",", { postskips: [new Token(TokenType.WhiteSpace, " ", { location: new SourceLocation(21, 1, 21) })], location: new SourceLocation(20, 1, 20) }))
        .add(new Node("select column")
          .add(new Node("expression")
            .add(new Token(TokenType.Operator, "+", { location: new SourceLocation(22, 1, 22) }))
            .add(new Token(TokenType.Number, "1", { location: new SourceLocation(23, 1, 23) }))
            .add(new Token(TokenType.Operator, "-", { location: new SourceLocation(24, 1, 24) }))
            .add(new Token(TokenType.Number, "2", { location: new SourceLocation(25, 1, 25) }))
            .add(new Token(TokenType.Operator, "*", { location: new SourceLocation(26, 1, 26) }))
            .add(new Token(TokenType.Number, "3", { location: new SourceLocation(27, 1, 27) }))
          )
        )
      )
    )
    .add(new Token(TokenType.Eof, "", { eos: true, location: new SourceLocation(28, 1, 28) }))
  )