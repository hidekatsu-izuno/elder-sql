import { SourceLocation, Token, TokenType, Keyword } from "../../../src/lexer"
import { Node } from "../../../src/parser"

export default new Node("Script")
  .append(new Node("SelectStatement")
    .append(new Node("SelectClause")
      .append(new Token(TokenType.Reserved, "SELECT", { keyword: Keyword.SELECT, location: new SourceLocation(0, 1, 0) }))
      .append(new Node("SelectColumnList")
        .append(new Node("SelectColumn")
          .append(new Node("SubtractOperation")
            .append(new Node("AddOperation")
              .append(new Node("NumericLiteral", "1")
                .append(new Token(TokenType.Numeric, "1", { preskips: [new Token(TokenType.WhiteSpace, " ", { location: new SourceLocation(6, 1, 6) })], location: new SourceLocation(7, 1, 7) }))
              )
              .append(new Token(TokenType.Operator, "+", { location: new SourceLocation(8, 1, 8) }))
              .append(new Node("NumericLiteral", "2")
                .append(new Token(TokenType.Numeric, "2", { location: new SourceLocation(9, 1, 9) }))
              )
            )
            .append(new Token(TokenType.Operator, "-", { location: new SourceLocation(10, 1, 10) }))
            .append(new Node("NumericLiteral", "3")
              .append(new Token(TokenType.Numeric, "3", { location: new SourceLocation(11, 1, 11) }))
            )
          )
        )
        .append(new Token(TokenType.Comma, ",", { postskips: [new Token(TokenType.WhiteSpace, " ", { location: new SourceLocation(13, 1, 13) })], location: new SourceLocation(12, 1, 12) }))
        .append(new Node("SelectColumn")
          .append(new Node("UnaryMinusOperation")
            .append(new Token(TokenType.Operator, "-", { location: new SourceLocation(14, 1, 14) }))
            .append(new Node("DivideOperation")
              .append(new Node("MultiplyOperation")
                .append(new Node("NumericLiteral", "1")
                  .append(new Token(TokenType.Numeric, "1", { location: new SourceLocation(15, 1, 15) }))
                )
                .append(new Token(TokenType.Operator, "*", { location: new SourceLocation(16, 1, 16) }))
                .append(new Node("NumericLiteral", "2")
                  .append(new Token(TokenType.Numeric, "2", { location: new SourceLocation(17, 1, 17) }))
                )
              )
              .append(new Token(TokenType.Operator, "/", { location: new SourceLocation(18, 1, 18) }))
              .append(new Node("NumericLiteral", "3")
                .append(new Token(TokenType.Numeric, "3", { location: new SourceLocation(19, 1, 19) }))
              )
            )
          )
          .append(new Node("ColumnAlias", "c1")
            .append(new Token(TokenType.Identifier, "c1", { preskips: [new Token(TokenType.WhiteSpace, " ", { location: new SourceLocation(20, 1, 20) })], location: new SourceLocation(21, 1, 21) }))
          )
        )
        .append(new Token(TokenType.Comma, ",", { postskips: [new Token(TokenType.WhiteSpace, " ", { location: new SourceLocation(24, 1, 24) })], location: new SourceLocation(23, 1, 23) }))
        .append(new Node("SelectColumn")
          .append(new Node("UnaryPlusOperation")
            .append(new Token(TokenType.Operator, "+", { location: new SourceLocation(25, 1, 25) }))
            .append(new Node("MultiplyOperation")
              .append(new Node("SubtractOperation")
                .append(new Node("NumericLiteral", "1")
                  .append(new Token(TokenType.Numeric, "1", { location: new SourceLocation(26, 1, 26) }))
                )
                .append(new Token(TokenType.Operator, "-", { location: new SourceLocation(27, 1, 27) }))
                .append(new Node("NumericLiteral", "2")
                  .append(new Token(TokenType.Numeric, "2", { location: new SourceLocation(28, 1, 28) }))
                )
              )
              .append(new Token(TokenType.Operator, "*", { location: new SourceLocation(29, 1, 29) }))
              .append(new Node("NumericLiteral", "3")
                .append(new Token(TokenType.Numeric, "3", { location: new SourceLocation(30, 1, 30) }))
              )
            )
          )
          .append(new Token(TokenType.Reserved, "AS", { keyword: Keyword.AS, preskips: [new Token(TokenType.WhiteSpace, " ", { location: new SourceLocation(31, 1, 31) })], location: new SourceLocation(32, 1, 32) }))
          .append(new Node("ColumnAlias", "c2")
            .append(new Token(TokenType.Identifier, "c2", { preskips: [new Token(TokenType.WhiteSpace, " ", { location: new SourceLocation(34, 1, 34) })], location: new SourceLocation(35, 1, 35) }))
          )
        )
      )
    )
    .append(new Token(TokenType.EoF, "", { eos: true, location: new SourceLocation(37, 1, 37) }))
  )
